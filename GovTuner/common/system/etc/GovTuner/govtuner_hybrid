#!/system/bin/sh
#GovTuner 2017 Copyright - Debuffer and Senthil360
#Hybrid Profile by Senthil360 (Recognized Developer @xda-developers.com)  <senthilmanikandan360@gmail.com>
core_ctl=0
option=$1
tweaked="/data/system/tweaked"
busybox="/system/etc/GovTuner/busybox"
# colors
G='\e[01;32m'
R='\e[01;31m'
N='\e[00;37;40m'
Y='\e[01;33m'
B='\e[01;34m'
V='\e[01;35m'
Bl='\e[01;30m'
C='\e[01;36m'
W='\e[01;37m'
div="--------------------------"

space() {
    $busybox echo " " >> $debug_log
    $busybox echo "$div" >> $debug_log
    $busybox echo " " >> $debug_log
}

find_dir() {
   if [ $tot_final -eq 1 ]; then
      loc_final=$dir0
   fi
   if [ $tot_final -eq 2 ]; then
      loc_final=$dir1
   fi
   if [ $tot_final -eq 3 ]; then
      loc_final=$dir2
   fi
   if [ $tot_final -eq 4 ]; then
      loc_final=$dir3
   fi
unset dir0; unset dir1; unset dir2; unset dir3;
}
   
input_dir() {
loc=$1
if [ -e $loc ]; then
   tot=$($busybox echo $loc | $busybox tr -cd '/' | $busybox wc -m)
   tot_final=$((tot-4))
   find_dir
   for e in $loc_final; do $busybox echo $e >> /sdcard/GT_list; done
   for f in $loc_final; do $busybox cat $f >> /sdcard/GT_list; done
   unset e; unset f;
fi
unset loc; unset loc_final; unset tot; unset tot_final;
}

alt_det() {
j=0
if [ -e /sdcard/GT_list ]; then
   $buysbox rm -f /sdcard/GT_list 2>/dev/null
fi
cpu_dir="/sys/devices/system/cpu"
cd /sys/devices/system/cpu
req_file=("scaling_governor" "cpuinfo_max_freq" "cpuinfo_min_freq")
while [ "$j" -lt "${#req_file[@]}" ]; do
   dir0=$cpu_dir/${req_file[$j]}; dir1=$cpu_dir/*/${req_file[$j]}; dir2=$cpu_dir/*/*/${req_file[$j]}; dir3=$cpu_dir/*/*/*/${req_file[$j]};
   echo "$j and ${req_file[$j]}"
   $busybox echo "${req_file[$j]} - $DEVICE" >> /sdcard/GT_list
   input_dir $cpu_dir/${req_file[$j]}
   input_dir $cpu_dir/*/${req_file[$j]}
   input_dir $cpu_dir/*/*/${req_file[$j]}
   input_dir $cpu_dir/*/*/*/${req_file[$j]}
   $busybox echo " " >> /sdcard/GT_list
   $busybox echo "$div" >> /sdcard/GT_list
   $busybox echo " " >> /sdcard/GT_list
  j=$((j+1))
done
unset j; unset req_file;
}

find_diff() {
file_max=$1
file_min=$2
max=$($busybox cat $file_max)
min=$($busybox cat $file_min)
differ=$(((max-min) / 10))
unset max; unset min; unset file_max; unset file_min;
}
        
cpu_sort() {
   cpu_no=$($busybox cat /sdcard/GT_list | $busybox grep "/scaling_governor" | $busybox wc -w)
   cd=1; ab=0;
   count_slash=$($busybox cat /sdcard/GT_list | $busybox grep "/scaling_governor" | $busybox tail -n 1 | $busybox tr -cd '/' | $busybox wc -c)
   while [ $ab -lt $cpu_no ]; do
       arr_gov[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep -A $cd "/scaling_governor" | $busybox tail -n 1)
       arr_path[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep "/cpuinfo_max_freq" | $busybox head -n $cd | $buysbox tail -n 1 | $busybox cut -d '/' -f1-$count_slash)
       arr_max[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep -A $cd "/cpuinfo_max_freq" | $busybox tail -n 1)
       arr_min[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep -A $cd "/cpuinfo_min_freq" | $busybox tail -n 1)
   ab=$((ab+1))
   cd=$((cd+1))
   done
   max_sort=($(for ef in ${arr_max[@]}; do echo $ef; done | sort -n))
   min_sort=($(for gh in ${arr_min[@]}; do echo $gh; done | sort -n))
   $busybox echo " " >> /sdcard/GT_list
   ad=0;
   while [ $ad -lt ${#max_sort[@]} ]; do
        CDF[$ad]=$(((${max_sort[$ad]} - ${min_sort[$ad]}) / 10))
        if [ ${CDF[$ad]} -lt 0 ]; then
           CDF[$ad]=$(( -1*${CDF[$ad]}))
        fi
    $busybox echo ${CDF[$ad]} >> /sdcard/GT_list
    ad=$((ad+1))
   done
   z=0;
   sortedArr=$(for i in ${arr_max[@]}; do echo "$i-$z%"; z=$((z+1)); done | sort -n)
   $busybox echo ${sortedArr[@]} > /sdcard/sorted.txt
   $busybox sleep 2
}

find_total() {
   ct=1; cluster_total=1; ctf=1
   dif[0]=${CDF[0]}
   cluster_diff[0]=${CDF[0]}
   while [ $ct -lt "${#CDF[@]}" ]; do
      if [ ${dif[0]} -eq ${CDF[$ct]} ]; then
         unset dif[0];
         dif[0]=${CDF[$ct]}
         ct=$((ct+1))
         continue;
      elif [ ${dif[0]} -ne ${CDF[$ct]} ]; then
           unset dif[0];
           dif[0]=${CDF[$ct]}
           cluster_diff[$ctf]=${CDF[$ct]}
           cluster_total=$((cluster_total+1))
           ct=$((ct+1))
           ctf=$((ctf+1))
           continue;
      fi
   done
   unset dif[0]; unset ct;
}

alt_det
cpu_sort
find_total
   

end_proc() {
   if [ -s /data/system/GT_PID ]; then
      proc1=$($busybox cat /data/system/GT_PID)
      proc2=$(ps | $busybox grep "$proc1" | $busybox head -n 1 | $busybox tr -s ' ' | $busybox cut -d ' ' -f2)
      if [ "$proc1" -eq "$proc2" ]; then
         kill "$proc1"
      fi
   fi
}

end_proc

cecho() {
	#cecho "value" path/file
	val=$1
        tunable=$2
        file1=/data/system/tweaked
        $busybox echo -e "${Y} $tunable ${N}: ${G} $val ${N}" >> "$file1"
	unset tunable; unset val
}

iper_method() {
   IPER=1
   if [ -s /data/system/iper ]; then
      unset IPER
      IPER=$($busybox cat /data/system/iper)
   fi
}

reset_splarr() {
  unset TL_1; unset TL_2; unset TL_3; unset TL_4; unset TL_5; unset TL_6; unset TL_7; unset TL_8; unset TL_9; unset tuneArr1; unset tunerArr2; unset ta; unset t;
}

spl_tunables_battery() {
$busybox echo -e "${B} Little/Regular CPU ${N}" > $tweaked
t=0
while [ "$t" -lt $cpu_no ]; do
        $busybox echo "check apply 171"
        sleep 3
        #Target_Loads_Battery                
        TL_1=$((${arr_min[$t]} + ${CDF[$t]}))
        TL_2=$(($TL_1 + ${CDF[$t]} + ${CDF[$t]}))
        TL_3=$(($TL_2 + ${CDF[$t]} + (${CDF[$t]} / 2)))
	TL_4=$(($TL_3 + (${CDF[$t]} / 2)))
	TL_5=$(($TL_4 + ${CDF[$t]}))
	TL_6=$(($TL_5 + (${CDF[$t]} / 2)))
	TL_7=$(($TL_6 + ${CDF[$t]} + (${CDF[$t]} / 2)))
	TL_8=$(($TL_7 + (${CDF[$t]} / 2)))
	TL_9=$(($TL_8 + ${CDF[$t]}))
        tuneArr1=("go_hispeed_load" "hispeed_freq" "target_loads" "sampling_rate" "up_threshold" "down_differential")
        tuneArr2=("$(((${CDF[$t]} / 10000)  + 75))" "$((($IPER * ((($IPER-1) * ${CDF[$t]}) + ${arr_min[$t]}))))" "0 ${arr_min[$t]}:50 $TL_1:35 $TL_2:45 $TL_3:52 $TL_4:59 $TL_5:75 $TL_6:90 $TL_7:95 $TL_9:99" "$((73000 - (($IPER-1) * 7000)))" "$((100 - (($IPER*3) - ($IPER/2))))" "$((67 - (($IPER*2) - ($IPER/2))))")
        ta=0
        while [ $ta -lt "${#tuneArr2[@]}" ]; do
              if [ -e "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}" ]; then
                 chmod 644 "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}"
                 $busybox echo "${tuneArr2[$ta]}" > "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}"
                 cecho "${tuneArr2[$ta]}" "${tuneArr1[$ta]}";
              fi
         ta=$((ta+1))
        done
        unset ta;
t=$((t+1))    
done
reset_splarr
}

spl_tunables_balanced() {
$busybox echo -e "${B} Little/Regular CPU ${N}" > $tweaked
t=0
while [ "$t" -lt $cpu_no ]; do
        #Target_Loads_Battery                
        TL_1=$((${arr_min[$t]} + ${CDF[$t]}))
        TL_2=$(($TL_1 + ${CDF[$t]} + ${CDF[$t]}))
        TL_3=$(($TL_2 + ${CDF[$t]} + (${CDF[$t]} / 2)))
	TL_4=$(($TL_3 + (${CDF[$t]} / 2)))
	TL_5=$(($TL_4 + ${CDF[$t]}))
	TL_6=$(($TL_5 + (${CDF[$t]} / 2)))
	TL_7=$(($TL_6 + ${CDF[$t]} + (${CDF[$t]} / 2)))
	TL_8=$(($TL_7 + (${CDF[$t]} / 2)))
	TL_9=$(($TL_8 + ${CDF[$t]}))
        tuneArr1=("go_hispeed_load" "hispeed_freq" "target_loads" "sampling_rate" "up_threshold" "down_differential")
        tuneArr2=("$(((${CDF[$t]} / 10000)  + 70))" "$((($IPER * ((($IPER-1) * ${CDF[$t0]}) + ${arr_min[$t]} + (${CDF[$t]} * 2)))))" "40 ${arr_min[$t]}:40 $TL_1:30 $TL_2:25 $TL_3:50 $TL_4:60 $TL_5:68 $TL_6:75 $TL_7:82 $TL_8:89" "$((63000 - (($IPER-1) * 7000)))" "$((85 - (($IPER*3) - ($IPER/2))))" "$((50 - (($IPER*2) - ($IPER/2))))")
        ta=0
        while [ $ta -lt ${#tuneArr2[@]} ]; do
              if [ -e "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}" ]; then
                 chmod 644 "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}"
                 $busybox echo "${tuneArr2[$ta]}" > "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}"
                 cecho "${tuneArr2[$ta]}" "${tuneArr1[$ta]}";
              fi
         ta=$((ta+1))
        done
        unset ta;
t=$((t+1))
done
reset_splarr
}

spl_tunables_performance() {
$busybox echo -e "${B} Little/Regular CPU ${N}" > $tweaked
t=0
while [ "$t" -lt $cpu_no ]; do
        #Target_Loads_Battery                
        TL_1=$((${arr_min[$t]} + ${CDF[$t]}))
        TL_2=$(($TL_1 + ${CDF[$t]} + ${CDF[$t]}))
        TL_3=$(($TL_2 + ${CDF[$t]} + (${CDF[$t]} / 2)))
	TL_4=$(($TL_3 + (${CDF[$t]} / 2)))
	TL_5=$(($TL_4 + ${CDF[$t]}))
	TL_6=$(($TL_5 + (${CDF[$t]} / 2)))
	TL_7=$(($TL_6 + ${CDF[$t]} + (${CDF[$t]} / 2)))
	TL_8=$(($TL_7 + (${CDF[$t]} / 2)))
	TL_9=$(($TL_8 + ${CDF[$t]}))
        tuneArr1=("go_hispeed_load" "hispeed_freq" "target_loads" "sampling_rate" "up_threshold" "down_differential")
        tuneArr2=("$(((${CDF[$t]} / 10000)  + 70))" "$((($IPER * ((($IPER-1) * ${CDF[$t0]}) + ${arr_min[$t]} + (${CDF[$t]} * 4)))))" "60 ${arr_min[$t]}:50 $TL_1:25 $TL_2:35 $TL_3:45 $TL_4:60 $TL_5:65 $TL_6:73 $TL_7:90 $TL_8:93 $TL_9:85" "$((53000 - (($IPER-1) * 7000)))" "$((70 - (($IPER*3) - ($IPER/2))))" "$((30 - (($IPER*2) - ($IPER/2))))")
        ta=0
        while [ $ta -lt "${#tuneArr2[@]}" ]; do
              if [ -e "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}" ]; then
                 chmod 644 "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}"
                 $busybox echo "${tuneArr2[$ta]}" > "${arr_path[$t]}/${arr_gov[$t]}/${tuneArr1[$ta]}"
                 cecho "${tuneArr2[$ta]}" "${tuneArr1[$ta]}";
              fi
         ta=$((ta+1))
        done
        unset ta;
t=$((t+1))     
done
reset_splarr
}                                                

assign_selection() {
  if [ $cluster_total -eq 2 ] && [ $v -eq 1 ]; then
     unset selection;
     selection="big"
  fi
  if [ $cluster_total -eq 3 ] && [ $v -eq 1 ]; then
     unset selection;
     selection="middle"
  fi
  if [ $cluster_total -eq 3 ] && [ $v -eq 2 ]; then
     unset selection;
     selection="big"
  fi
}
        
apply_profile() {
u=0; v=0;
selection="little"
$busybox echo " " >> $tweaked
         $busybox echo -e "${B}Tunables${N} ${R}$selection${N}" >> $tweaked
while [ $u -lt ${#arr_gov[@]} ]; do
      find_diff "${arr_path[$u]}/cpuinfo_max_freq" "${arr_path[$u]}/cpuinfo_min_freq"
      if [ $differ -eq ${cluster_diff[$v]} ]; then
        q=0
        while [ $q -lt 158 ]; do
         q=$((q+1));
         field_table="/system/etc/GovTuner/profiles/field_table_$selection"
         w1[$q]=$($busybox head -n $q $field_table | $busybox tail -n 1 | $busybox cut -d '-' -f1)
         w2[$q]=$($busybox head -n $q $field_table | $busybox tail -n 1 | $busybox cut -d '%' -f$r | cut -d '-' -f1)
         if [ "${w1[$q]}" = "go_hispeed_load" ] || [ "${w1[$q]}" = "hispeed_freq" ] || [ "${w1[$q]}" = "target_loads" ] || [ "${w1[$q]}" = "sampling_rate" ] || [ "${w1[$q]}" = "up_threshold" ] || [ "${w1[$q]}" = "down_differential" ]; then
            unset w1[$q]; unset w2[$q];
            continue
         fi
         if [ "${w1[$q]}" = "second_phase_freq" ] || [ "${w1[$q]}" = "freq_down_step" ] || [ "${w1[$q]}" = "freq_down_step_barrier" ] || [ "${w1[$q]}" = "optimal_freq" ] || [ "${w1[$q]}" = "freq_responsiveness" ]  || [ "${w1[$q]}" = "awake_ideal_freq" ] || [ "${w1[$q]}" = "boost_freq" ] || [ "${w1[$q]}" = "suspend_ideal_freq" ] || [ "${w1[$q]}" = "freq_calc_thresh" ] || [ "${w1[$q]}" = "inter_lofreq" ] || [ "${w1[$q]}" = "staycycles_resetfreq" ] || [ "${w1[$q]}" = "active_floor_freq" ] || [ "${w1[$q]}" = "music_min_freq" ]; then
          unset w2[$q];
          w2[$q]="${arr_min[$u]}"
         fi
         if [ -e "${arr_path[$u]}/${arr_gov[$u]}/${w1[$q]}" ]; then
          chmod 644 "${arr_path[$u]}/${arr_gov[$u]}/${w1[$q]}"
          $busybox echo -n "${w2[$q]}" > "${arr_path[$u]}/${arr_gov[$u]}/${w1[$q]}"
          cecho "${w2[$q]}" "${w1[$q]}"
          $busybox sleep 0.1
         fi
        done
      unset differ;
      fi
   u=$((u+1))
   if [ $cluster_total -eq 2 ] && [ $v -eq 1 ]; then
      break;
   fi
   if [ $cluster_total -eq 3 ] && [ $v -eq 2 ]; then
      break;
   fi
   if [ $u -eq ${#arr_gov[@]} ]; then
      if [ $cluster_total -gt 1 ] && [ $v -eq 0 ]; then
         unset u; unset v;
         u=0; v=1;
         assign_selection
         $busybox echo " " >> $tweaked
         $busybox echo -e "${B}Tunables${N} ${R}$selection${N}" >> $tweaked
         continue;
      fi
      if [ $cluster_total -eq 3 ] && [ $v -eq 1 ]; then
         unset u; unset v;
         u=0; v=2;
         assign_selection
         $busybox echo " " >> $tweaked
         $busybox echo -e "${B}Tunables${N} ${R}$selection${N}" >> $tweaked
         continue;
      fi
   fi
done
unset q; unset field_table_reg; unset w1; unset w2;
reset_splarr
}

onboot_exec() {
 onboot=/system/etc/GovTuner/00gt_init
 mount -o remount,rw /system 2>/dev/null
 if [ -d /system/su.d ]; then
    cp -f $onboot /system/su.d/00gt_init
    chmod 777 /system/su.d/00gt_init
 fi
 if [ -d /system/etc/init.d ]; then
    cp -f $onboot /system/etc/init.d/00gt_init
    chmod 777 /system/etc/init.d/00gt_init
 fi
 if [ -d /system/etc/init ]; then
    cp -f $onboot /system/etc/init/00gt_init
    chmod 777 /system/etc/init/00gt_init
 fi
 mount -o remount,ro /system
}
    

$busybox sleep 3

while true; do
if [ "$option" -eq 1 ] || [ "$option" -eq 2 ] || [ "$option" -eq 3 ]; then
   $busybox echo $$ > /data/system/GT_PID
fi
#Execute profiles
if [ "$option" -eq 1 ]; then
   r=2 ; profile=battery;
fi
if [ "$option" -eq 2 ]; then
   r=3; profile=balanced;
fi
if [ "$option" -eq 3 ]; then
   r=4; profile=performance;
fi
$busybox echo "Applying $profile profile"
$busybox echo "$profile" > /data/system/GT_profile

iper_method

if [ "$cluster_total" -eq 1 ]; then
   spl_tunables_$profile
   apply_profile
   
fi
if [ "$cluster_total" -eq 2 ]; then
   spl_tunables_$profile
   apply_profile
fi
if [ "$cluster_total" -eq 3 ]; then
   spl_tunables_$profile
   apply_profile
fi
onboot_exec

if [ -s /data/system/INTERVAL ]; then
   exec_interval=$($busybox cat /data/system/INTERVAL)
   $busybox sleep $exec_interval
else
   exit
fi

done
