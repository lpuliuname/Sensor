#!/system/bin/sh
# Gov-Tuner Launcher
# Copyright (C) 2016 - 2017 Debuffer and Senthil360 @ XDA-Developers
#      With help from Paget96, F4uzan, GreekDragon, N1m0Y and veez21.
#=#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
#=#
#TO-DO - Add log for little/big in govtuner_hybrid

# = DEBUG =====
# govtuner --verbose
if [ "$1" == "--verbose" ]; then
	set -x
fi
# =============

divider="======="
busybox="/system/etc/GovTuner/busybox"
getprop="/system/bin/getprop"
ver="4.2-BETA_1"
id="$(id)"; id="${id#*=}"; id="${id%%\(*}"; id="${id%% *}"
VER=$($busybox awk -F= '/ro.build.version.release/{print $NF}' /system/build.prop)
DEVICE=$($getprop ro.product.model | $busybox grep '[a-zA-Z0-9]');
ROOT=0
INTERVAL=/data/system/INTERVAL
core_ctl=0
TIME=$($busybox cat /proc/uptime | $busybox cut -d '.' -f1)

# Set up Busybox for seemless integration in GT script
alias busybox="$busybox"; zap=1
for i in $($busybox --list); do
	if [ "$i" != 'echo' ] && [ "$zap" -ge 5 ]; then
		alias $i="$busybox $i"
	fi
	zap=$(($zap+1))
done
unset zap

#Hold your horses :P. Added this check to provide time for the device to initialize CPU parameters properly. This also solves the init.d not working errors
# caused due to early launching of scripts
if [ "$TIME" -lt 180 ]; then
	echo "GovTuner must be run atleast after a time interval of 3 minutes after booting. This is to ensure the CPU directories are set properly, this script will exit now. Please run after 3 minutes"
	sleep 15
	exit
fi
if [ ! -d "/data/system/GovTuner/current" ]; then
	$busybox mount -o remount,rw /data 2>/dev/null
	$busybox mkdir -p /data/system/GovTuner/current
	$busybox sleep 0.4
	$busybox mount -o remount,ro /data 2>/dev/null
fi
sleep 0.4
PROFILE_DIR="/data/system/GovTuner/current"

# colors
G='\e[01;32m'
R='\e[01;31m'
N='\e[00;37;40m'
Y='\e[01;33m'
B='\e[01;34m'
V='\e[01;35m'
Bl='\e[01;30m'
C='\e[01;36m'
W='\e[01;37m'

find_dir() {
   if [ $tot_final -eq 1 ]; then
      loc_final=$dir0
   fi
   if [ $tot_final -eq 2 ]; then
      loc_final=$dir1
   fi
   if [ $tot_final -eq 3 ]; then
      loc_final=$dir2
   fi
   if [ $tot_final -eq 4 ]; then
      loc_final=$dir3
   fi
unset dir0; unset dir1; unset dir2; unset dir3;
}
   
input_dir() {
loc=$1
if [ -e $loc ]; then
   tot=$($busybox echo $loc | $busybox tr -cd '/' | $busybox wc -m)
   tot_final=$((tot-4))
   find_dir
   for e in $loc_final; do $busybox echo $e >> /sdcard/GT_list; done
   for f in $loc_final; do $busybox cat $f >> /sdcard/GT_list; done
   unset e; unset f;
fi
unset loc; unset loc_final; unset tot; unset tot_final;
}

alt_det() {
j=0
rm /sdcard/GT_list 2>/dev/null
cpu_dir="/sys/devices/system/cpu"
cd /sys/devices/system/cpu
req_file=("scaling_governor" "cpuinfo_max_freq" "cpuinfo_min_freq")
while [ "$j" -lt "${#req_file[@]}" ]; do
   dir0=$cpu_dir/${req_file[$j]}; dir1=$cpu_dir/*/${req_file[$j]}; dir2=$cpu_dir/*/*/${req_file[$j]}; dir3=$cpu_dir/*/*/*/${req_file[$j]};
   echo "$j and ${req_file[$j]}"
   $busybox echo "${req_file[$j]} - $DEVICE" >> /sdcard/GT_list
   input_dir $cpu_dir/${req_file[$j]}
   input_dir $cpu_dir/*/${req_file[$j]}
   input_dir $cpu_dir/*/*/${req_file[$j]}
   input_dir $cpu_dir/*/*/*/${req_file[$j]}
   $busybox echo " " >> /sdcard/GT_list
   $busybox echo "$div" >> /sdcard/GT_list
   $busybox echo " " >> /sdcard/GT_list
  j=$((j+1))
done
unset j; unset req_file;
}

check_order() {
a=1; b=2; d=1
c=$(cat /sdcard/sorted.txt | tr -cd '%' | wc -m)
store[0]=0;
while [ $a -lt $c ]; do
  initial=$(cat /sdcard/sorted.txt | cut -d '-' -f$a | cut -d '%' -f2 | tr -d ' ')
  final=$(cat /sdcard/sorted.txt | cut -d '-' -f$b | cut -d '%' -f2 | tr -d ' ')
  if [ $initial -ne $final ]; then
     store[$d]=$(cat /sdcard/sorted.txt | cut -d '-' -f$((b+1)) | cut -d '%' -f1 | tr -d ' ')
     d=$((d+1))
  fi
  a=$((a+1))
  b=$((b+1))
done
unset a; unset b; unset c; unset d; unset initial; unset final;
}
           
cpu_sort() {
   cpu_no=$($busybox cat /sdcard/GT_list | $busybox grep "/scaling_governor" | $busybox wc -w)
   cd=1; ab=0;
   count_slash=$($busybox cat /sdcard/GT_list | $busybox grep "/scaling_governor" | $busybox tail -n 1 | $busybox tr -cd '/' | $busybox wc -c)
   while [ $ab -lt $cpu_no ]; do
       arr_gov[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep -A $cd "/scaling_governor" | $busybox tail -n 1)
       arr_path[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep "/cpuinfo_max_freq" | $busybox head -n $cd | $buysbox tail -n 1 | $busybox cut -d '/' -f1-$count_slash)
       arr_max[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep -A $cd "/cpuinfo_max_freq" | $busybox tail -n 1)
       arr_min[$ab]=$($busybox cat /sdcard/GT_list | $busybox grep -A $cd "/cpuinfo_min_freq" | $busybox tail -n 1)
   ab=$((ab+1))
   cd=$((cd+1))
   done
   max_sort=($(for ef in ${arr_max[@]}; do echo $ef; done | sort -n))
   min_sort=($(for gh in ${arr_min[@]}; do echo $gh; done | sort -n))
   $busybox echo " " >> /sdcard/GT_list
   ad=0;
   while [ $ad -lt ${#max_sort[@]} ]; do
        CDF[$ad]=$(((${max_sort[$ad]} - ${min_sort[$ad]}) / 10))
        if [ ${CDF[$ad]} -lt 0 ]; then
           CDF[$ad]=$(( -1*${CDF[$ad]}))
        fi
    $busybox echo ${CDF[$ad]} >> /sdcard/GT_list
    ad=$((ad+1))
   done
   z=0;
   sortedArr=$(for i in ${arr_max[@]}; do echo "$i-$z%"; z=$((z+1)); done | sort -n)
   $busybox echo ${sortedArr[@]} > /sdcard/sorted.txt
   check_order
   $busybox sleep 2
unset cd; unset ab; unset ef; unset gh; unset ad; unset z;
}

find_total() {
   ct=1; cluster_total=1; ctf=1
   dif[0]=${CDF[0]}
   cluster_diff[0]=${CDF[0]}
   while [ $ct -lt "${#CDF[@]}" ]; do
      if [ ${dif[0]} -eq ${CDF[$ct]} ]; then
         unset dif[0];
         dif[0]=${CDF[$ct]}
         ct=$((ct+1))
         continue;
      elif [ ${dif[0]} -ne ${CDF[$ct]} ]; then
           unset dif[0];
           dif[0]=${CDF[$ct]}
           cluster_diff[$ctf]=${CDF[$ct]}
           cluster_total=$((cluster_total+1))
           ct=$((ct+1))
           ctf=$((ctf+1))
           continue;
      fi
   done
   unset dif[0]; unset ct;
}

   alt_det
   cpu_sort
   find_total

while true; do
	# Devices with core_ctl hotplug have constantly changing clusters which makes it impossible to read from them. So setting core_ctl to 1 will change the
	# way how GT works on the device.
	for z in $cpu/cpu*; do
		if [ -d $z/cpufreq/core_ctl ]; then
			core_ctl=1
		fi
	done

	interval_choose() {
		clear
                if [ -e $INTERVAL ]; then
		   $busybox echo "Current Interval: ${G}$(cat $INTERVAL)${N} secs"
		   $busybox echo $divider
                else
                   $busybox echo "Interval not set, please enter in seconds [ e to exit ]"
                   $busybox echo -e "${R}d.${N} - disable loop"
                   $busybox echo $divider
                fi
                while read cus; do
                if [ "$cus" = "e" ] || [ "$cus" = "E" ]; then
                   return;
                fi
                if [ "$cus" = "d" ] || [ "$cus" = "D" ]; then
                   rm $INTERVAL
                   return;
                fi
                if [ $cus -gt 0 ]; then
                   $busybox echo "$cus" > $INTERVAL
                else
                   $busybox echo ""$cus" is not recognised as integer , enter NUMERICAL value"
                fi 2>/dev/null
                unset cus;
                done
	}
	#Terminal_output_Begins
	if [ "$ROOT" -eq 0 ]; then
			$busybox clear
			$busybox echo -e "Check number core: ${G}OK $(($cpu_no))${N}"
			$busybox echo -e "Check regular and small clusters: ${G}OK (CD$cluster_total)${N}"
			if [ "$cluster_total" -ne 1 ]; then
			   $busybox echo -e "Check number clusters: ${G}OK ($cluster_total)${N}"
			fi
			if [ "$cluster_total" -ne 1 ]; then
				$busybox echo -e "Check bigLITTLE: ${G}OK (1)${N}"
			fi
			$busybox echo ""
			$busybox echo "If, by any chance, the script is malfunctioning,send screenshot/s of that/those error/s to the development team so that it can/might be resolved. Thank you."
			$busybox sleep 5
	fi
	if [ "$cluster_total" -eq 0 ]; then
			$busybox sleep 1
			$busybox echo ""
			$busybox echo ""
			$busybox echo "		Unsupported device!"
			$busybox echo ""
			$busybox echo ""
			$busybox sleep 1
			exit 1
	fi
	if [ "$ROOT" -eq 0 ]; then
		$busybox clear
		$busybox echo "Checking root"; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root."; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root.."; $busybox sleep 0.2; $busybox clear;

		if [ "$id" != "0" ] && [ "$id" != "root" ]; then
			$busybox sleep 1
			$busybox echo ""
			$busybox echo ""
			$busybox echo "    Unable to gain root access"
			$busybox echo "    You might forgot to use su, or there's a problem with root"
			$busybox echo "    Please type su first"
			$busybox echo "    Then type govtuner"
			$busybox echo ""
			$busybox sleep 2
			exit 1
		else
			ROOT=1
			$busybox clear
			$busybox echo "Root access succesfully acquired"
			$busybox sleep 0.3
			$busybox echo ""
			$busybox echo "Loading GovTuner setup..."
			$busybox sleep 0.3
			$busybox echo ""
			$busybox clear
		fi
	fi
        sleep 0.5
        prof=def
        if [ -s /data/system/GT_profile ]; then
           prof=$($busybox cat /data/system/GT_profile | $busybox cut -d ' ' -f1)
        fi
	if [ "$prof" = "battery" ]; then
		profile="${Y}Battery\e[0m"
		c=1
	elif [ "$prof" = "balanced" ]; then
		profile="${G}Balanced\e[0m"
		c=6
	elif [ "$prof" = "performance" ]; then
		profile="${V}Performance\e[0m"
		c=4
	else
		profile="${Bl}Default\e[0m"
		c=0
	fi
        unset prof;

	$busybox sleep 1
	$busybox clear;
	$busybox clear;
	echo "                      "
	$busybox sleep 0.2
	echo -e "\e[01;3"$c"m  _____               ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m / ____|              ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m | | __  _____    __ ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m | ||_ |/ _ \ \  / / ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m | |_| | (_) \ \/ /  ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m \_____|\___/ \__/   ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m      _______                   ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m     |__   __|                  ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        | |_   _ _,__   ____,__ ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        | | | | |  _ \ / _ \ __| ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        | | |_| | | | |  __/ |  ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        |_|\__,_|_| |_|\___|_|  ${N}"
	$busybox sleep 0.4
	echo "                                 "
	$busybox echo -e "Profile: $profile"
	$busybox echo ""
	# Always double quote array elements and expansions to prevent globbing and word-splitting.
	ab=0
	for i in "${arr_gov[@]}"; do
		if [ "$i" = "zzmoove" ]; then
		   if [ -f ${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug ]; then
			HOTPLUG=$($busybox cat ${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug)
		   fi
		   if [ "$HOTPLUG" -eq 1 ]; then
			$busybox echo -e "CPU$ab Hotplug: Stock Hotplug"
		   fi
		   if [ "$HOTPLUG" -eq 0 ]; then
			$busybox echo -e "CPU$ab Hotplug: Zzmoove Tweaked Hotplug"
		   fi
		        $busybox echo ""
		fi
		ab=$((ab+1))
	done
        unset ab; unset i;
	if [ "$cluster_total" -gt 1 ]; then
		$busybox echo -e "Cluster device: ${W}Yes${N}"
		$busybox echo ""
	fi
	if [ "$cluster_total" -eq 1 ]; then
		$busybox echo -e "Cluster device: No"
		$busybox echo ""
	fi
	if [ "$cluster_total" -gt 1 ]; then
		#For bigLITTLE
		$busybox echo -e "bigLITTLE: ${W}present${N}"
		$busybox echo ""
		if [ "$cluster_total" -eq 3 ]; then
			#For 3 CPU
			$busybox echo -e "Governor LITTLE core: ${W}${arr_gov[${store[0]}]}${N}"
			$busybox echo -e "Governor Middle core: ${W}${arr_gov[${store[1]}]}${N}"
			$busybox echo -e "Governor big core:    ${W}${arr_gov[${store[2]}]}${N}"
		fi
		if [ "$cluster_total" -eq 2 ]; then
			$busybox echo -e "Governor LITTLE core: ${W}${arr_gov[${store[0]}]}${N}"
			$busybox echo -e "Governor big core:    ${W}${arr_gov[${store[1]}]}${N}"
		fi
		fi
	if [ "$cluster_total" -eq 1 ]; then
			$busybox echo -e "Governor: ${W}${arr_gov[${store[0]}]}${N}"
	fi

	$busybox echo ""
	$busybox echo -e "Device: ${W}${DEVICE}${N}"
	$busybox echo ""
	$busybox echo -e "Android Version: ${W}${VER}${N}"
	$busybox echo ""
	$busybox echo -e "Govtuner Version: ${W}$ver${N}"
	$busybox echo ""
	if [ "$cluster_total" -eq 3 ]; then
		#For triple cluster
		 $busybox echo -e "CPU LITTLE Min/Max: ${W}$((${arr_min[${store[0]}]} / 1000)) MHz${N} / ${W}$((${arr_max[${store[0]}]} / 1000)) MHz${N}"
                 $busybox echo -e "CPU MIDDLE Min/Max: ${W}$((${arr_min[${store[1]}]} / 1000)) MHz${N} / ${W}$((${arr_max[${store[1]}]} / 1000)) MHz${N}"
	         $busybox echo -e "CPU BIG Min/Max: ${W}$((${arr_min[${store[2]}]} / 1000)) MHz${N} / ${W}$((${arr_max[${store[2]}]} / 1000)) MHz${N}"
	fi
        if [ "$cluster_total" -eq 2 ]; then
	       #For double cluster
	       $busybox echo -e "CPU LITTLE Min/Max: ${W}$((${arr_min[${store[0]}]} / 1000)) MHz${N} / ${W}$((${arr_max[${store[0]}]} / 1000)) MHz${N}"
               $busybox echo -e "CPU BIG Min/Max: ${W}$((${arr_min[${store[1]}]} / 1000)) MHz${N} / ${W}$((${arr_max[${store[1]}]} / 1000)) MHz${N}"
        fi	
	if [ "$cluster_total" -eq 1 ]; then
	       #For single_ cluster/regular
	       $busybox echo -e "CPU LITTLE Min/Max: ${W}$((${arr_min[${store[0]}]} / 1000)) MHz${N} / ${W}$((${arr_max[${store[0]}]} / 1000)) MHz${N}"
	fi
	if [ "$core_ctl" -eq 1 ]; then
		$busybox echo ""
		$busybox echo "If some options (like change governor) do not show on your device ,it means that your device has core_ctl hotplug , unfortunately we cannot add those options to your device. "
	fi
	$busybox echo ""
	$busybox echo $divider
	$busybox echo "        -Please choose a profile-"
	$busybox echo $divider
	$busybox echo -e "${R}     1 - Battery ${N}"
	$busybox echo ""
	$busybox echo -e "\e[01;36m     2 - Balanced ${N}"
	$busybox echo ""
	$busybox echo -e "${B}     3 - Performance ${N}"
	$busybox echo $divider
	ab=0
	for i in "${arr_gov[@]}"; do
		if [ "$i" = "zzmoove" ]; then
		   if [ -f ${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug ]; then
			HOTPLUG=$($busybox cat ${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug)
			$busybox echo "--- Zzmoove hotplug found , please choose ---"
			$busybox echo -e "${W} s. Stock Hotplug ${N}"
			$busybox echo -e "${W} z. Zzmoove Hotplug ${N}"
			$busybox echo "---"
		   fi
		fi
	    ab=$(($ab+1))
	done
        unset ab; unset i;
        if [ -s /data/system/IPER ]; then
           IPER=$($busybox cat /data/system/IPER)
        else
           IPER=1
           $busybox echo 1 > /data/system/IPER
        fi

        $busybox echo -e "${G} i.${N} ${W}Increase performance${N} ${Y}($IPER)${N}"
	$busybox echo -e "${W} u. Disable GovTuner ${N}"
	$busybox echo -e "${W} c. Changelog ${N}"
       
        #POWER_EFFICIENT
	if [ -e "/sys/module/workqueue/parameters/power_efficient" ]; then
           PE=$($busybox cat /sys/module/workqueue/parameters/power_efficient)
	   $busybox echo -e "${W} p.Power efficient (Yes/No : ${N}${Y}$PE${N})"
	fi

	$busybox echo -e "${W} w. Tweaked Parameters ${N}"

        #INTERVAL_CHOOSER
	if [ -e $INTERVAL ]; then
           INT_SEC=$($busybox cat $INTERVAL)
           $busybox echo -e "${W} v. Change Execution Interval${N} ${G}($INT_SEC secs)${N}"
        else
           $busybox echo -e "${W} v. Change Execution Interval${N}"
        fi

	$busybox echo " e. Exit"

	$busybox echo $divider
        #ACTIVE/INACTIVE
	if [ -s /data/system/GT_PID ]; then
		sleep 0.2
		OUTPUT_ID=$($busybox cat /data/system/GT_PID)
		if [ -d "/proc/$OUTPUT_ID" ]; then
			sleep 0.2
			echo -e "${W} GovTuner-LOOP${N}: ${G} ACTIVE ${N} ${B}(PID=$OUTPUT_ID)${N}"
		else
			echo -e "${W} GovTuner-LOOP${N}: ${R} INACTIVE ${N}"
		fi
	fi
	$busybox echo ""
        #RUN-ON-BOOT
	if [ -e /gt_boot ]; then
           $busybox echo -e "${W}Run on-boot support${N}: ${G} Present ${N}"
        else
           $busybox echo -e "${W}Run on-boot support${N}: ${R} Not Available ${N}"
	fi

	$busybox echo ""
	$busybox echo -n "Please select a profile:"
	read -r character
	case $character in
		1)
			$busybox setsid /system/etc/GovTuner/profiles/GovTuner_hybrid 1 &
                        $busybox echo "Activating Battery profile"
		        $busybox sleep 30
		        $busybox echo ""
			sleep 2
		;;

		2)
			$busybox setsid /system/etc/GovTuner/profiles/GovTuner_hybrid 2 &
                        $busybox echo "Activating Balanced profile"
		        $busybox sleep 30
		        $busybox echo ""
			sleep 2
		;;

		3)
			$busybox setsid /system/etc/GovTuner/profiles/GovTuner_hybrid 3 &
                        $busybox echo "Activating Performance profile"
		        $busybox sleep 30
		        $busybox echo ""
			sleep 2
		;;

		s|S)
			$busybox clear;
			$busybox echo "Enabling zzmoove hotplug"
			sleep 2
			ab=0
	                for i in "${arr_gov[@]}"; do
		            if [ "$i" = "zzmoove" ]; then
		               if [ -f ${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug ]; then
			          HOTPLUG_FILE=${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug
		                  $busybox echo "1" > $HOTPLUG_FILE
		               fi
                            fi
		         ab=$((ab+1))
	                done
                        unset ab; unset i; unset HOTPLUG_FILE
		;;

		z|Z)
			$busybox clear;
			$busybox echo "Enabling zzmoove hotplug"
			sleep 2
			ab=0
	                for i in "${arr_gov[@]}"; do
		            if [ "$i" = "zzmoove" ]; then
		               if [ -f ${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug ]; then
			          HOTPLUG_FILE=${arr_path[$ab]}/${arr_gov[$ab]}/disable_hotplug
		                  $busybox echo "0" > $HOTPLUG_FILE
		               fi
                            fi
		         ab=$((ab+1))
	                done
                        unset ab; unset i; unset HOTPLUG_FILE
		;;


		u|U)
			$busybox clear
			GT_PID=$($busybox cat /data/system/GT_PID)
			kill $GT_PID 2>/dev/null
			echo "Removing files"
			$busybox sleep 0.5
			echo "Killing process"
			$busybox echo "1" > "/data/system/IPER"
                        $busubox echo "def" > /data/system/GT_profile
			$busybox echo "Governor_Tuner Disabled"
                        rm -f /data/system/INTERVAL
			$busybox sleep 0.5
			$busybox clear
		;;

		c|C)
			$busybox clear;
			sh "/system/etc/GovTuner/change.sh"
		;;
                
		e|E)
			$busybox clear;
			$busybox mount -o remount,ro /system 2>/dev/null
			exit
		;;

		i|I)
			$busybox clear;
			$busybox echo "";
			#Increase performance
			$busybox echo -e "${W}Increase device's performance to improve responsiveness.${N}";
			$busybox echo "Type a value between 1 (off) to 4 (maximum)";
			echo -e "CURRENT: ${G}$IPER${N}"
			echo -n "[1-4]: "
			while read IP; do
				if [ "$IP" == "" ] || [[ -n $(echo $IP | $busybox tr -d '0-9') ]] || [ "$IP" -gt "4" ]; then
					$busybox clear; sleep 1
					$busybox echo "incorrect value! Type a value between 1 and 4"
					echo -e "CURRENT: ${G}$IPER${N}";echo -n "[1-4]: "
				else
					$busybox clear;
					IPER=$IP
					$busybox echo $IPER > "/data/system/IPER"
					$busybox echo -e "${W}Value to increase${N} ${G}($IPER)${N}"
					$busybox sleep 2
					$busybox echo "Applied!"
					$busybox sleep 1
					break
				fi
			done
			sleep 3
			$busybox clear;
		;;

		p|P)
			$busybox clear;
			$busybox echo "";
			chmod 644 /sys/module/workqueue/parameters/power_efficient;
                        $busybox echo "Enable or Disable Y/N"
			while read opt; do
                        if [ "$opt" = "e" ] || [ "$opt" = "E" ]; then
                           return;
                        fi
                        if [ "$opt" = "y" ] || [ "$opt" = "Y" ]; then
                           $busybox echo "Y" > /sys/module/workqueue/parameters/power_efficient;
                           break
                        elif [ "$opt" = "n" ] || [ "$opt" = "N" ]; then
                           $busybox echo "N" > /sys/module/workqueue/parameters/power_efficient;
                           break
                        else
                           $busybox echo "value $opt not recognised"
                           break
                        fi 2>/dev/null
                        unset opt;
                        break;
                        $busybox clear;
                        done
		;;

		w|W)
			$busybox clear;
			$busybox echo ""
			if [ -e "/data/system/tweaked" ]; then
				$busybox echo -e "${B} The following parameters are tweaked :- ${N}"
				$busybox echo ""
				$busybox cat /data/system/tweaked
				$busybox echo $divider
				$busybox echo "Press enter to go back"
				read
			else
				$busybox echo "Nothing to show"
				sleep 2
			fi
			$busybox clear
		;;


		v|V)
			interval_choose
		;;

		*)
			$busybox clear;
			$busybox echo "Invalid option, please try again"
			$busybox sleep 1
			exit
		;;
	esac
done
