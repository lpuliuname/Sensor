#!/system/bin/sh
# Gov-Tuner Launcher
# Copyright (C) 2016 - 2017 Debuffer and Senthil360 @ XDA-Developers
#      With help from Paget96, F4uzan, GreekDragon, N1m0Y and veez21.
#=#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
#=#

# = DEBUG =====
# govtuner --verbose
if [ "$1" == "--verbose" ]; then
	set -x
fi
# =============

divider="======="
core="/system/etc/GovTuner"
busybox="/system/etc/GovTuner/busybox"
getprop="/system/bin/getprop"
init="/system/etc/init.d"
ver="4.1"
id="$(id)"; id="${id#*=}"; id="${id%%\(*}"; id="${id%% *}"
INIT_TEST="/gt_test"
VER=$($busybox awk -F= '/ro.build.version.release/{print $NF}' /system/build.prop)
DEVICE=$($getprop ro.product.model | $busybox grep '[a-zA-Z0-9]');
FREQS=0
ROOT=0
INTERVAL=/data/system/INTERVAL_SEC
core_ctl=0
TIME=$($busybox cat /proc/uptime | $busybox cut -d '.' -f1)

# Set up Busybox for seemless integration in GT script
alias busybox="$busybox"; zap=1
for i in $($busybox --list); do
	if [ "$i" != 'echo' ] && [ "$zap" -ge 5 ]; then
		alias $i="$busybox $i"
	fi
	zap=$(($zap+1))
done
unset zap

#Hold your horses :P. Added this check to provide time for the device to initialize CPU parameters properly. This also solves the init.d not working errors
# caused due to early launching of scripts
if [ "$TIME" -lt 180 ]; then
	echo "GovTuner must be run atleast after a time interval of 3 minutes after booting. This is to ensure the CPU directories are set properly, this script will exit now. Please run after 3 minutes"
	sleep 15
	exit
fi
if [ ! -d "/data/system/GovTuner/current" ]; then
	$busybox mount -o remount,rw /data 2>/dev/null
	$busybox mkdir -p /data/system/GovTuner/current
	$busybox sleep 0.4
	$busybox mount -o remount,ro /data 2>/dev/null
fi
sleep 0.4
PROFILE_DIR="/data/system/GovTuner/current"

# colors
G='\e[01;32m'
R='\e[01;31m'
N='\e[00;37;40m'
Y='\e[01;33m'
B='\e[01;34m'
V='\e[01;35m'
Bl='\e[01;30m'
C='\e[01;36m'
W='\e[01;37m'

while true; do
	# Devices with core_ctl hotplug have constantly changing clusters which makes it impossible to read from them. So setting core_ctl to 1 will change the
	# way how GT works on the device.
	for z in $cpu/cpu*; do
		if [ -d $z/cpufreq/core_ctl ]; then
			core_ctl=1
		fi
	done

	interval_choose() {
		if [ ! -f $INTERVAL ]; then
			echo 300 > $INTERVAL
		fi
		clear
		echo "Current Interval: ${G}$(cat $INTERVAL)${N} secs"
		echo $divider
		echo " 1 - ${W}30 secs${N}"
		echo " 2 - ${W}1 min / 60 secs${N}"
		echo " 3 - ${W}2 mins / 120 secs${N}"
		echo " 4 - ${W}3 mins / 180 secs${N}"
		echo " 5 - Custom"
		echo " 6 - ${R}Locked${N}"
		echo " 0 - Back"
		echo $divider
		echo -n -e "[Choice]: "
		read int
		case $int in
			1)
				echo "Changing to 30 secs"
				echo 30 > $INTERVAL
				sleep 2
				clear
				return
			;;
			2)
				echo "Changing to 1 min"
				echo 60 > $INTERVAL
				sleep 2
				clear
				return
			;;
			3)
				echo "Changing to 2 mins"
				echo 120 > $INTERVAL
				sleep 2
				clear
				return
			;;
			4)
				echo "Changing to 3 mins"
				echo 180 > $INTERVAL
				sleep 2
				clear
				return
			;;
			5)
				clear
				echo -n -e "Change to (in seconds): "
				read cus
				if [ "$cus" == "" ]; then
					echo "Error"
					sleep 1
					return 1
				fi
				tmp=$(echo $cus | tr -d '0-9')
				if [ $tmp ]; then
					echo Error
					sleep 1
					return 1
				else
					echo "Changing to $cus"
					echo $cus > $INTERVAL
					sleep 2
					clear
					return
				fi
			;;
			6)
				echo "Locked loop"
				echo 0 > $INTERVAL
				sleep 2
				clear
				return
			;;
			0)
				clear; return
			;;
			*)
				echo "Invalid!"
				sleep 1
				clear
				return 1
			;;
		esac
	}

	main_detect() {
        DIR="/sys/devices/system/cpu/*"
        CORE=$($busybox cat /sys/devices/system/cpu/possible | $busybox cut -d '-' -f2)
        checkA=$($busybox find $DIR -name cpuinfo_max_freq)
        checkB=$($busybox find $DIR -name cpuinfo_min_freq)
        total=$($busybox find $DIR -name cpuinfo_max_freq | $busybox wc -l)
        A=0; A1=1; C=0; D=1
        while [ "$A" -lt "$total" ]; do
            check1[$A]=$($busybox echo "$checkA" | $busybox head -n $A1 | $busybox tail -n 1)
            check2[$A]=$($busybox echo "$checkB" | $busybox head -n $A1 | $busybox tail -n 1)
            check3[$A]=$($busybox realpath "${check1[$A]}")
            check4[$A]=$($busybox realpath "${check2[$A]}")
            path[$A]=$($busybox echo "${check1[$A]}" | $busybox rev | $busybox cut -c 17- | $busybox rev)
          if [ "${check1[$A]}" = "${check3[$A]}" ] && [ "${check2[$A]}" = "${check4[$A]}" ]; then
             sca_gov[$C]=$($busybox cat "${path[$A]}/scaling_governor")
             checkC=$($busybox find $DIR -name "${sca_gov[$C]}")
             gov[$C]=$($busybox echo "$checkC" | $busybox head -n $D | $busybox tail -n 1)
             max_Freq[$C]=$($busybox cat "${check1[$A]}")
             min_Freq[$C]=$($busybox cat "${check2[$A]}")
             CDF[$C]=$(((${max_Freq[$C]} - ${min_Freq[$C]}) / 10 ))
             if [ "${CDF[$C]}" -lt 0 ]; then
                CDF[$C]=$(( -1 * ${CDF[$C]} ))
             fi
             if [ "${gov[$C]}" = "/sys/devices/system/cpu/cpufreq/${sca_gov[$C]}" ]; then
                ga=0
                break
             fi
             $busybox sleep 0.2
             C=$((C+1))
             D=$((D+1))
          fi
         A=$((A+1))
         A1=$((A1+1))
       done
       FREQS="${#CDF[@]}"
       if [ "$FREQS" -eq 3 ]; then
          unset smArr; unset m;
          smArr=($(for i in "${CDF[@]}"; do $busybox echo "$i"; done | $busybox sort -n))
          m=0
          while [ "$m" -lt 3 ]; do
             if [ "${smArr[0]}" -eq "${CDF[$m]}" ]; then
                ga="$m"
             fi
             if [ "${smArr[1]}" -eq "${CDF[$m]}" ]; then
                gb="$m"
             fi
             if [ "${smArr[2]}" -eq "${CDF[$m]}" ]; then
                gc="$m"
             fi
            m="$((m+1))"
          done
       fi   
       if [ "$FREQS" -eq 2 ]; then
          unset smArr; unset m;
          smArr=($(for i in "${CDF[@]}"; do $busybox echo "$i"; done | $busybox sort -n))
          m=0
          while [ "$m" -lt 2 ]; do
             if [ "${smArr[0]}" -eq "${CDF[$m]}" ]; then
                ga="$m"
             fi
             if [ "${smArr[1]}" -eq "${CDF[$m]}" ]; then
                gc="$m"
             fi
            m="$((m+1))"
          done
       fi
       if [ "$FREQS" -eq 1 ]; then
          unset smArr; unset m;
          ga=0
       fi
}  

	if [ "$core_ctl" -eq 0 ]; then
	    main_detect
	fi

	# Interval Fix
	if [ ! -f $INTERVAL_SEC ]; then
		echo 180 > $INTERVAL_SEC
	fi

	if [ -e "/sys/module/workqueue/parameters/power_efficient" ]; then
		if [ -e "/data/system/PE" ]; then
			PE=$($busybox cat /data/system/PE);
		else
			PE=$($busybox cat /sys/module/workqueue/parameters/power_efficient)
			$busybox echo "$PE" > "/data/system/PE";
		fi
	fi

	#Terminal_output_Begins
	if [ "$core_ctl" -eq 0 ]; then
		if [ "$ROOT" -eq 0 ]; then
			$busybox clear
			$busybox echo -e "Check number core: ${G}OK ($CORE)${N}"
			$busybox echo -e "Check regular and small clusters: ${G}OK (CD$FREQS)${N}"
			if [ "$FREQS" -ne 1 ]; then
			   $busybox echo -e "Check number clusters: ${G}OK ($FREQS)${N}"
			fi
			if [ "$FREQS" -ne 1 ]; then
				$busybox echo -e "Check bigLITTLE: ${G}OK (1)${N}"
			fi
			$busybox echo ""
			$busybox echo "If, by any chance, the script is malfunctioning,send screenshot/s of that/those error/s to the development team so that it can/might be resolved. Thank you."
			$busybox sleep 5
		fi
		if [ "$FREQS" -eq 0 ]; then
			$busybox sleep 1
			$busybox echo ""
			$busybox echo ""
			$busybox echo "		Unsupported device!"
			$busybox echo ""
			$busybox echo ""
			$busybox sleep 1
			exit 1
		fi
	fi
	if [ "$ROOT" -eq 0 ]; then
		$busybox clear
		$busybox echo "Checking root"; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root."; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root.."; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root..."; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root..."; $busybox sleep 0.5; $busybox clear;
		$busybox echo "Checking root.."; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root."; $busybox sleep 0.2; $busybox clear;
		$busybox echo "Checking root"; $busybox sleep 0.5; $busybox clear;

		if [ "$id" != "0" ] && [ "$id" != "root" ]; then
			$busybox sleep 1
			$busybox echo ""
			$busybox echo ""
			$busybox echo "    Unable to gain root access"
			$busybox echo "    You might forgot to use su, or there's a problem with root"
			$busybox echo "    Please type su first"
			$busybox echo "    Then type govtuner"
			$busybox echo ""
			$busybox echo ""
			$busybox sleep 1
			exit 1
		else
			ROOT=1
			$busybox clear
			$busybox sleep 0.3
			$busybox echo "Root access succesfully acquired"
			$busybox sleep 0.3
			$busybox echo ""
			$busybox echo "Loading GovTuner setup..."
			$busybox sleep 0.3
			$busybox echo ""
			$busybox sleep 0.3
			$busybox clear
		fi
	fi
	sleep 2
        prof=def
        if [ -s /data/system/GT_profile ]; then
           prof=$($busybox cat /data/system/GT_profile | $busybox cut -d ' ' -f1)
        fi
	if [ "$prof" = "battery" ]; then
		profile="${Y}Battery\e[0m"
		c=1
	elif [ "$prof" = "balanced" ]; then
		profile="${G}Balanced\e[0m"
		c=6
	elif [ "$prof" = "performance" ]; then
		profile="${V}Performance\e[0m"
		c=4
	else
		profile="${Bl}Default\e[0m"
		c=0
	fi
        unset prof;

	$busybox sleep 1
	$busybox clear;
	$busybox clear;
	echo "                      "
	$busybox sleep 0.4
	echo -e "\e[01;3"$c"m  _____               ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m / ____|              ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m | | __  _____    __ ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m | ||_ |/ _ \ \  / / ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m | |_| | (_) \ \/ /  ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m \_____|\___/ \__/   ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m      _______                   ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m     |__   __|                  ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        | |_   _ _,__   ____,__ ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        | | | | |  _ \ / _ \ __| ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        | | |_| | | | |  __/ |  ${N}"
	$busybox sleep 0.1
	echo -e "\e[01;3"$c"m        |_|\__,_|_| |_|\___|_|  ${N}"
	$busybox sleep 0.1
	echo "                                 "
	$busybox echo -e "Profile: $profile"
	$busybox echo ""
	# Always double quote array elements and expansions to prevent globbing and word-splitting.
	if [ "$core_ctl" -eq 0 ]; then
		ab=0
		for i in "${sca_gov[@]}"; do
			if [ "$i" = "zzmoove" ]; then
				if [ -f ${gov[$ab]}/disable_hotplug ]; then
					HOTPLUG=$($busybox cat ${gov[$ab]}/disable_hotplug)
				fi
				if [ "$HOTPLUG" -eq 1 ]; then
					$busybox echo -e "CPU$ab Hotplug: Stock Hotplug"
				fi
				if [ "$HOTPLUG" -eq 0 ]; then
					$busybox echo -e "CPU$ab Hotplug: Zzmoove Tweaked Hotplug"
				fi
				$busybox echo ""
			fi
			ab=$(($ab + 1))
		done
	fi
	if [ "$core_ctl" -eq 0 ]; then
		if [ "$FREQS" -gt 1 ]; then
			$busybox echo -e "Cluster device: ${W}Yes${N}"
			$busybox echo ""
		fi
		if [ "$FREQS" -eq 1 ]; then
			$busybox echo -e "Cluster device: No"
			$busybox echo ""
		fi
		if [ "$FREQS" -gt 1 ]; then
			#For bigLITTLE
			$busybox echo -e "bigLITTLE: ${W}present${N}"
			$busybox echo ""
			if [ "$FREQS" -eq 3 ]; then
				#For 3 CPU
				$busybox echo -e "Governor LITTLE core: ${W}${sca_gov[$ga]}${N}"
				$busybox echo -e "Governor Middle core: ${W}${sca_gov[$gb]}${N}"
				$busybox echo -e "Governor big core:    ${W}${sca_gov[$gc]}${N}"
			fi
			if [ "$FREQS" -eq 2 ]; then
				$busybox echo -e "Governor LITTLE core: ${W}${sca_gov[$ga]}${N}"
				$busybox echo -e "Governor big core:    ${W}${sca_gov[$gc]}${N}"
			fi
		fi
		if [ "$FREQS" -eq 1 ]; then
			$busybox echo -e "Governor: ${W}${sca_gov[$ga]}${N}"
		fi
	fi

	$busybox echo ""
	$busybox echo -e "Device: ${W}${DEVICE}${N}"
	$busybox echo ""
	$busybox echo -e "Android Version: ${W}${VER}${N}"
	$busybox echo ""
	$busybox echo -e "Govtuner Version: ${W}$ver${N}"
	$busybox echo ""
	if [ "$core_ctl" -eq 0 ]; then
		if [ "$FREQS" -eq 3 ]; then
		   #For triple cluster
		   $busybox echo -e "CPU LITTLE Min/Max: ${W}$((${min_Freq[$ga]} / 1000)) MHz${N} / ${W}$((${max_Freq[$ga]} / 1000)) MHz${N}"
                   $busybox echo -e "CPU MIDDLE Min/Max: ${W}$((${min_Freq[$gb]} / 1000)) MHz${N} / ${W}$((${max_Freq[$gb]} / 1000)) MHz${N}"
	           $busybox echo -e "CPU BIG Min/Max: ${W}$((${min_Freq[$gc]} / 1000)) MHz${N} / ${W}$((${max_Freq[$gc]} / 1000)) MHz${N}"
		fi
                if [ "$FREQS" -eq 2 ]; then
		   #For double cluster
		   $busybox echo -e "CPU LITTLE Min/Max: ${W}$((${min_Freq[$ga]} / 1000)) MHz${N} / ${W}$((${max_Freq[$ga]} / 1000)) MHz${N}"
	           $busybox echo -e "CPU BIG Min/Max: ${W}$((${min_Freq[$gc]} / 1000)) MHz${N} / ${W}$((${max_Freq[$gc]} / 1000)) MHz${N}"
		fi	
		if [ "$FREQS" -eq 1 ]; then
		   #For single_ cluster/regular
		   $busybox echo -e "CPU LITTLE/REG Min/Max: ${W}$((${min_Freq[$ga]} / 1000)) MHz${N} / ${W}$((${max_Freq[$ga]} / 1000)) MHz${N}"
		fi
	fi
	if [ "$core_ctl" -eq 1 ]; then
		$busybox echo ""
		$busybox echo "If some options (like change governor) do not show on your device ,it means that your device has core_ctl hotplug , unfortunately we cannot add those options to your device. "
	fi
	$busybox echo ""
	$busybox echo $divider
	$busybox echo "        -Please choose a profile-"
	$busybox echo $divider
	$busybox echo -e "${R}     1 - Battery ${N}"
	$busybox echo ""
	$busybox echo -e "\e[01;36m     2 - Balanced ${N}"
	$busybox echo ""
	$busybox echo -e "${B}     3 - Performance ${N}"
	$busybox echo $divider
	if [ "$core_ctl" -eq 0 ]; then
		ab=0
		for i in "${sca_gov[@]}"; do
			if [ "$i" = "zzmoove" ]; then
			   if [ -f ${gov[$ab]}/disable_hotplug ]; then
				HOTPLUG=$($busybox cat ${gov[$ab]}/disable_hotplug)
				$busybox echo "--- Zzmoove hotplug found , please choose ---"
				$busybox echo -e "${W} s. Stock Hotplug ${N}"
				$busybox echo -e "${W} z. Zzmoove Hotplug ${N}"
				$busybox echo "---"
			   fi
			fi
			ab=$(($ab+1))
		done
	fi
        if [ -s /data/system/IPER ]; then
           IPER=$($busybox cat /data/system/IPER)
        else
           IPER=1
        fi
	if [ "$IPER" -eq 1 ]; then
		$busybox echo -e "${R} i.${N} ${W}Increase performance${N} ${R}($IPER)${N}"
	else
		$busybox echo -e "${G} i.${N} ${W}Increase performance${N} ${G}($IPER)${N}"
	fi
	$busybox echo -e "${W} u. Disable GovTuner ${N}"
	$busybox echo -e "${W} c. Changelog ${N}"
	if [ -e "/sys/module/workqueue/parameters/power_efficient" ]; then
		if [ "$PE" = "N" ]; then
			$busybox echo -e "${R} p.${N} ${W}Power efficient ${N}"
		elif [ "$PE" = "Y" ]; then
			$busybox echo -e "${G} p.${N} ${W}Power efficient ${N}"
		fi
	fi
	$busybox echo -e "${W} w. Tweaked Parameters ${N}"
	if [[ $(cat $INTERVAL 2>/dev/null) && $(cat $INTERVAL) -ne 0 ]]; then
		INT_SEC=$(cat $INTERVAL)
	elif [[ $(cat $INTERVAL 2>/dev/null) && $(cat $INTERVAL) -eq 0 ]]; then
		INT_SEC=locked
	else
		INT_SEC=300
	fi
	if [[ $(cat $INTERVAL 2>/dev/null) && $(cat $INTERVAL) -ne 0 ]]; then
		$busybox echo -e "${W} v. Change Execution Interval${N} ${G}($INT_SEC secs)${N}"
	elif [[ $(cat $INTERVAL 2>/dev/null) && $(cat $INTERVAL) -eq 0 ]]; then
		$busybox echo -e "${W} v. Change Execution Interval${N} ${R}($INT_SEC)${N}"
	else
		$busybox echo -e "${W} v. Change Execution Interval${N} ${R}($INT_SEC)${N}"
	fi
	$busybox echo " e. Exit"
	$busybox echo $divider
	if [ -s /data/system/GT_PID ]; then
		sleep 0.2
		OUTPUT_ID=$($busybox cat /data/system/GT_PID)
		if [ -d "/proc/$OUTPUT_ID" ]; then
			sleep 0.2
			echo -e "${W} GovTuner${N}: ${G} ACTIVE ${N} ${B}(PID=$OUTPUT_ID)${N}"
		else
			echo -e "${W} GovTuner${N}: ${R} INACTIVE ${N}"
		fi
	fi
	$busybox echo ""
	if [ -f /system/etc/init.d/00gt_init ]; then
		Init="Init.d"; init=initd
	elif [ -f /system/su.d/00gt_init ]; then
		Init="Su.d"; init=sud
	elif [ -f /system/etc/GovTuner/init/00gt_init ]; then
		Init="Magisk"; init=magisk; INIT_TEST="/system/etc/GovTuner/init/gt_test"
	else
		Init="ERROR"
	fi
	if [ -f "$INIT_TEST" ]; then
		echo -e "${W} $Init ${N} : ${G} WORKING ${N}"
	else
		echo -e "${W} $Init ${N} : ${R} NOT WORKING ${N}"
		$busybox echo -e "${W} If you use 3rd party init.d emulators, as Kernel Adiutor init.d emulator, it's fine as well, it just won't show up here as active. ${N}"
		if [ -d /data/data/eu.chainfire.supersu ] && [ -d /system/su.d ] && [ $(getprop ro.build.version.sdk) -ge 21 ] && [ "$init" != "sud" ]; then
			echo " SuperSu's SU.D detected. Su.d is like Init.d but better. Import init scripts to /system/su.d? <type: sud> "
		fi
	fi
	$busybox echo ""
	$busybox echo -n "Please select a profile:"
	read -r character
	case $character in
		1)
			$busybox setsid /system/etc/GovTuner/profiles/GovTuner_hybrid 1 &
                        $busybox echo "Activating Battery profile"
		        $busybox sleep 0.3
		        $busybox echo ""
			sleep 2
		;;

		2)
			$busybox setsid /system/etc/GovTuner/profiles/GovTuner_hybrid 2 &
                        $busybox echo "Activating Balanced profile"
		        $busybox sleep 0.3
		        $busybox echo ""
			sleep 2
		;;

		3)
			$busybox setsid /system/etc/GovTuner/profiles/GovTuner_hybrid 3 &
                        $busybox echo "Activating Performance profile"
		        $busybox sleep 0.3
		        $busybox echo ""
			sleep 2
		;;

		s|S)
			$busybox clear;
			$busybox echo "Enabling zzmoove hotplug"
			sleep 2
			d2=0
			for i in "${sca_gov[@]}"; do
				if [ "$i" = "zzmoove" ]; then
				   if [ -f ${gov[$d2]}/disable_hotplug ]; then
					$busybox echo 1 > ${gov[$d2]}/disable_hotplug
				   fi
				fi
				d2=$(($d2+1))
			done
		;;

		z|Z)
			$busybox clear;
			$busybox echo "Enabling zzmoove hotplug"
			sleep 2
			d1=0
			for i in "${sca_gov[@]}"; do
				if [ "$i" = "zzmoove" ]; then
				   if [ -f ${gov[$d1]}/disable_hotplug ]; then
				       $busybox echo 0 > ${gov[$d1]}/disable_hotplug
				   fi
                                fi
				d1=$(($d1+1))
			done
		;;


		u|U)
			$busybox clear
			GT_PID=$($busybox cat /data/system/GT_PID)
			kill $GT_PID 2>/dev/null
			echo "Removing files"
			$busybox sleep 0.5
			echo "Killing process"
			$busybox echo "1" > "/data/system/IPER"
                        $busubox echo "def" > /data/system/GT_profile
			$busybox echo "Governor_Tuner Disabled"
			$busybox sleep 0.5
			$busybox clear
		;;

		c|C)
			$busybox clear;
			sh $core/change.sh
		;;

		e|E)
			$busybox clear;
			$busybox mount -o remount,ro /system 2>/dev/null
			exit
		;;

		i|I)
			$busybox clear;
			$busybox echo "";
			#Increase performance
			$busybox echo -e "${W}Increase device's performance to improve responsiveness.${N}";
			$busybox echo "Type a value between 1 (off) to 4 (maximum)";
			echo -e "CURRENT: ${G}$IPER${N}"
			echo -n "[1-4]: "
			while read IP; do
				if [ "$IP" == "" ] || [[ -n $(echo $IP | $busybox tr -d '0-9') ]] || [ "$IP" -gt "4" ]; then
					$busybox clear; sleep 1
					$busybox echo "incorrect value! Type a value between 1 and 4"
					echo -e "CURRENT: ${G}$IPER${N}";echo -n "[1-4]: "
				else
					$busybox clear;
					IPER=$IP
					$busybox echo $IPER > "/data/system/IPER"
					$busybox echo -e "${W}Value to increase${N} ${G}($IPER)${N}"
					$busybox sleep 2
					$busybox echo "Applied!"
					$busybox sleep 1
					break
				fi
			done
			sleep 3
			$busybox clear;
		;;

		p|P)
			$busybox clear;
			$busybox echo "";
			#Power efficient
			chmod 644 /sys/module/workqueue/parameters/power_efficient;
			$busybox echo -e "${W} y. Enable ${N}";
			$busybox echo -e "${W} n. Disable  ${N}";
			read -r p
			case $p in
				y|Y)
					$busybox echo "Y" > /sys/module/workqueue/parameters/power_efficient;
					power_efficient=$($busybox cat /sys/module/workqueue/parameters/power_efficient);
					$busybox echo "power_efficient: $power_efficient";
				;;
				n|N)
					$busybox echo "N" > /sys/module/workqueue/parameters/power_efficient;
					power_efficient=$($busybox cat /sys/module/workqueue/parameters/power_efficient);
					$busybox echo "power_efficient: $power_efficient";
				;;
				*)
					$busybox clear;
					$busybox echo "Invalid option, please try again";
					$busybox sleep 1
					exit
				;;
			esac
			PE=$($busybox cat /sys/module/workqueue/parameters/power_efficient);
			$busybox echo "$PE" > "/data/system/PE";
			sleep 3
			$busybox clear;
		;;

		w|W)
			$busybox clear;
			$busybox echo ""
			if [ -e "/data/system/tweaked" ]; then
				TWEAKED="/data/system/tweaked"
				$busybox echo -e "${B} The following parameters are tweaked :- ${N}"
				$busybox echo ""
				$busybox cat $TWEAKED
				$busybox echo $divider
				$busybox echo "Press enter to go back"
				read
			else
				$busybox echo "Nothing to show"
				sleep 2
			fi
			$busybox clear
		;;

		sud)
			clear
			if [ -d /system/su.d ]; then
				echo "Transfering init scripts to /system/su.d ..."
				sleep 0.4
				if [ -f /system/etc/init.d/gt_atest ]; then
					$busybox mv /system/etc/init.d/gt_atest /system/su.d
					sleep 0.4
				fi
				if [ -f /system/etc/init.d/00gt_init ]; then
					$busybox mv /system/etc/init.d/00gt_init /system/su.d
					sleep 0.4
				fi
				chmod -R 700 /system/su.d;
				echo "Reboot to see if Govtuner is active. If Govtuner applying on boot error still persists, contact the dev team."
				sleep 3; clear
			else
				echo "Abort! No /system/su.d found!"
				exit 1
			fi
		;;

		v|V)
			interval_choose
		;;

		*)
			$busybox clear;
			$busybox echo "Invalid option, please try again"
			$busybox sleep 1
			exit
		;;
	esac
done
